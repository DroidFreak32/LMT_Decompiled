package com.noname81.lmt;

import android.app.Activity;
import android.os.Build;
import android.os.Bundle;
import android.widget.ListAdapter;
import android.widget.ListView;
import com.noname81.lmt.SettingsViewHelper;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

public class SettingsViewActivity extends Activity {
    SettingsViewHelper mSettingsHelper;

    public void onCreate(Bundle savedInstanceState) {
        int pos;
        super.onCreate(savedInstanceState);
        this.mSettingsHelper = new SettingsViewHelper(this);
        SeparatedListAdapter adapter = new SeparatedListAdapter(this);
        List<Map<String, ?>> touchServiceSettings = new LinkedList<>();
        touchServiceSettings.add(SeparatedListAdapter.createItem("Activate LMT", "Activate or deactivate LMT"));
        touchServiceSettings.add(SeparatedListAdapter.createItem("Autostart LMT", "Configure if LMT should run at startup"));
        touchServiceSettings.add(SeparatedListAdapter.createItem("Set active features", "Configure LMT's feature set"));
        SettingsViewHelper settingsViewHelper = this.mSettingsHelper;
        int pos2 = 0 + 1;
        settingsViewHelper.posOffsetTouchservice = 0;
        int pos3 = pos2 + 1;
        settingsViewHelper.posActivateTouchService = pos2;
        int pos4 = pos3 + 1;
        settingsViewHelper.posAutostartTouchService = pos3;
        int pos5 = pos4 + 1;
        settingsViewHelper.posSetMode = pos4;
        settingsViewHelper.getClass();
        adapter.addSection("General", this.mSettingsHelper.new SettingsSimpleAdapter(this, touchServiceSettings, this.mSettingsHelper.posOffsetTouchservice, false));
        List<Map<String, ?>> pieActivation = new LinkedList<>();
        pieActivation.add(SeparatedListAdapter.createItem("Activation area position", "Activation area position, default = all"));
        pieActivation.add(SeparatedListAdapter.createItem("Activation area thickness", "Activation area thickness in pixel, default = 50"));
        pieActivation.add(SeparatedListAdapter.createItem("Activation area length", "Activation area length in pixel, default = 600"));
        pieActivation.add(SeparatedListAdapter.createItem("Activation area gravity", "Configure the gravity, default = center"));
        pieActivation.add(SeparatedListAdapter.createItem("Activation area behind keyboard", "Configure if the activation area should be placed behind the keyboard, default = deactivated"));
        if (Build.VERSION.SDK_INT < 26) {
            pieActivation.add(SeparatedListAdapter.createItem("Activation area on lockscreen", "Configure if pie should be active on lockscreen, default = deactivated"));
        }
        pieActivation.add(SeparatedListAdapter.createItem("Add to pie blacklist", "Exclude an app from pie"));
        pieActivation.add(SeparatedListAdapter.createItem("Clear pie blacklist", "Clear all excluded apps"));
        SettingsViewHelper settingsViewHelper2 = this.mSettingsHelper;
        int pos6 = pos5 + 1;
        settingsViewHelper2.posOffsetPieActivation = pos5;
        int pos7 = pos6 + 1;
        settingsViewHelper2.posPiePos = pos6;
        int pos8 = pos7 + 1;
        settingsViewHelper2.posPieAreaX = pos7;
        int pos9 = pos8 + 1;
        settingsViewHelper2.posPieAreaY = pos8;
        int pos10 = pos9 + 1;
        settingsViewHelper2.posPieAreaGravity = pos9;
        int pos11 = pos10 + 1;
        settingsViewHelper2.posPieAreaBehindKeyboard = pos10;
        if (Build.VERSION.SDK_INT < 26) {
            pos = pos11 + 1;
            this.mSettingsHelper.posPieOnLockScreen = pos11;
        } else {
            pos = pos11;
        }
        SettingsViewHelper settingsViewHelper3 = this.mSettingsHelper;
        int pos12 = pos + 1;
        settingsViewHelper3.posAddBlacklistPie = pos;
        int pos13 = pos12 + 1;
        settingsViewHelper3.posClearBlacklistPie = pos12;
        settingsViewHelper3.getClass();
        adapter.addSection("Pie Activation", this.mSettingsHelper.new SettingsSimpleAdapter(this, pieActivation, this.mSettingsHelper.posOffsetPieActivation, false));
        List<Map<String, ?>> pieStyle = new LinkedList<>();
        pieStyle.add(SeparatedListAdapter.createItem("Pie colors", "0 = blue, 1 = red, 2 = grey, 3 = none, 4 = white, 5 = magenta/yellow, 6 = green/outline, 7 = red/outline, default = 0"));
        pieStyle.add(SeparatedListAdapter.createItem("Pie inner radius", "Radius in dip, default = 60"));
        pieStyle.add(SeparatedListAdapter.createItem("Pie outer radius", "Radius in dip, default = 80"));
        pieStyle.add(SeparatedListAdapter.createItem("Pie shift size", "Size of the pie shift effect in pixel, default = 0"));
        pieStyle.add(SeparatedListAdapter.createItem("Pie outline size", "Size of the outline in pixel, default = 3"));
        pieStyle.add(SeparatedListAdapter.createItem("Pie slice gap", "Size of the gap between two pie slices, default = 0"));
        pieStyle.add(SeparatedListAdapter.createItem("Pie start gap", "Size of the gap between pie and border, default = 0"));
        SettingsViewHelper settingsViewHelper4 = this.mSettingsHelper;
        int pos14 = pos13 + 1;
        settingsViewHelper4.posOffsetPieStyle = pos13;
        int pos15 = pos14 + 1;
        settingsViewHelper4.posPieColor = pos14;
        int pos16 = pos15 + 1;
        settingsViewHelper4.posPieInnerRadius = pos15;
        int pos17 = pos16 + 1;
        settingsViewHelper4.posPieOuterRadius = pos16;
        int pos18 = pos17 + 1;
        settingsViewHelper4.posPieShiftSize = pos17;
        int pos19 = pos18 + 1;
        settingsViewHelper4.posPieOutlineSize = pos18;
        int pos20 = pos19 + 1;
        settingsViewHelper4.posPieSliceGap = pos19;
        int pos21 = pos20 + 1;
        settingsViewHelper4.posPieStartGap = pos20;
        settingsViewHelper4.getClass();
        adapter.addSection("Pie Style", this.mSettingsHelper.new SettingsSimpleAdapter(this, pieStyle, this.mSettingsHelper.posOffsetPieStyle, false));
        List<Map<String, ?>> pieBehavior = new LinkedList<>();
        pieBehavior.add(SeparatedListAdapter.createItem("Longpress time", "Min time for longpress in ms, default = 500"));
        pieBehavior.add(SeparatedListAdapter.createItem("Animation time", "Time for the pie animation in ms, default = 80"));
        pieBehavior.add(SeparatedListAdapter.createItem("Feedback type", "Configure the pie feedback for diffent actions, default = longpress"));
        pieBehavior.add(SeparatedListAdapter.createItem("Vibration Time", "Define the vibration time in ms, default = 30"));
        pieBehavior.add(SeparatedListAdapter.createItem("Multi command", "Configure if actions should be fired multiple times when swiping on item, default = disabled"));
        pieBehavior.add(SeparatedListAdapter.createItem("Expand trigger area", "Configure if the action trigger area should be expanded to the full screen for the outer pie ring, default = enabled"));
        SettingsViewHelper settingsViewHelper5 = this.mSettingsHelper;
        int pos22 = pos21 + 1;
        settingsViewHelper5.posOffsetPieBehavior = pos21;
        int pos23 = pos22 + 1;
        settingsViewHelper5.posPieLongpress = pos22;
        int pos24 = pos23 + 1;
        settingsViewHelper5.posPieAnimation = pos23;
        int pos25 = pos24 + 1;
        settingsViewHelper5.posPieVibrate = pos24;
        int pos26 = pos25 + 1;
        settingsViewHelper5.posPieVibrationTime = pos25;
        int pos27 = pos26 + 1;
        settingsViewHelper5.posPieMultiCommand = pos26;
        int pos28 = pos27 + 1;
        settingsViewHelper5.posPieExpandTriggerArea = pos27;
        settingsViewHelper5.getClass();
        adapter.addSection("Pie Behavior", this.mSettingsHelper.new SettingsSimpleAdapter(this, pieBehavior, this.mSettingsHelper.posOffsetPieBehavior, false));
        List<Map<String, ?>> pieIcons = new LinkedList<>();
        pieIcons.add(SeparatedListAdapter.createItem("Rotate images", "Rotate icons based on pie angle"));
        pieIcons.add(SeparatedListAdapter.createItem("Set nav button style", "Switch between different icon sets for the nav buttons"));
        pieIcons.add(SeparatedListAdapter.createItem("Show and scale app images", "0 = disabled, 1 = enabled (no filter), 2 = enabled, >2 = image size in pixel, default = enabled"));
        pieIcons.add(SeparatedListAdapter.createItem("Show and scale user images", "0 = disabled, 1 = enabled (no filter), 2 = enabled, >2 = image size in pixel, default = disabled"));
        pieIcons.add(SeparatedListAdapter.createItem("Set user image search path", "default = /storage/emulated/0/Android/data/com.noname81.lmt/files/ (Leave blank to set default)"));
        SettingsViewHelper settingsViewHelper6 = this.mSettingsHelper;
        int pos29 = pos28 + 1;
        settingsViewHelper6.posOffsetPieIcons = pos28;
        int pos30 = pos29 + 1;
        settingsViewHelper6.posPieRotateImages = pos29;
        int pos31 = pos30 + 1;
        settingsViewHelper6.posPieNavButtonStyle = pos30;
        int pos32 = pos31 + 1;
        settingsViewHelper6.posPieShowScaleAppImages = pos31;
        int pos33 = pos32 + 1;
        settingsViewHelper6.posPieShowScaleUserImages = pos32;
        int pos34 = pos33 + 1;
        settingsViewHelper6.posPieUserImageSearchPath = pos33;
        settingsViewHelper6.getClass();
        adapter.addSection("Pie Icons", this.mSettingsHelper.new SettingsSimpleAdapter(this, pieIcons, this.mSettingsHelper.posOffsetPieIcons, false));
        List<Map<String, ?>> pieExtensions = new LinkedList<>();
        pieExtensions.add(SeparatedListAdapter.createItem("Pie pointer edge activation", "Configure if the pie pointer feature can be activated from the edges, default = disabled"));
        pieExtensions.add(SeparatedListAdapter.createItem("Pie pointer warp factor", "Configure the warp factor for the pie pointer feature,\ndefault = 300%, min = 200%, max = 1000%"));
        pieExtensions.add(SeparatedListAdapter.createItem("Pie pointer color", "0 = blue, default = 0"));
        pieExtensions.add(SeparatedListAdapter.createItem("Show status infos", "Configure if status info feature should be shown, default = enabled"));
        pieExtensions.add(SeparatedListAdapter.createItem("Pie status info colors", "0 = white, default = 0"));
        pieExtensions.add(SeparatedListAdapter.createItem("Pie status info font", "Configure the pie font, default = Roboto Light"));
        SettingsViewHelper settingsViewHelper7 = this.mSettingsHelper;
        int pos35 = pos34 + 1;
        settingsViewHelper7.posOffsetPieExtensions = pos34;
        int pos36 = pos35 + 1;
        settingsViewHelper7.posPiePointerFromEdges = pos35;
        int pos37 = pos36 + 1;
        settingsViewHelper7.posPiePointerWarpFactor = pos36;
        int pos38 = pos37 + 1;
        settingsViewHelper7.posPiePointerColor = pos37;
        int pos39 = pos38 + 1;
        settingsViewHelper7.posPieShowStatusInfos = pos38;
        int pos40 = pos39 + 1;
        settingsViewHelper7.posPieStatusInfoColor = pos39;
        int i = pos40 + 1;
        settingsViewHelper7.posPieStatusInfoFont = pos40;
        settingsViewHelper7.getClass();
        adapter.addSection("Pie Extensions", this.mSettingsHelper.new SettingsSimpleAdapter(this, pieExtensions, this.mSettingsHelper.posOffsetPieExtensions, false));
        ListView list = new ListView(this);
        list.setAdapter((ListAdapter) adapter);
        list.setOnItemClickListener(this.mSettingsHelper);
        list.setDividerHeight(0);
        setContentView(list);
    }
}