package com.example.lmt;

import android.app.Fragment;
import android.os.Build;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ListAdapter;
import android.widget.ListView;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

public class SettingsViewFragment extends Fragment {
    SettingsViewHelper mSettingsHelper;

    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        setUserVisibleHint(true);
    }

    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        super.onCreateView(inflater, container, savedInstanceState);
        this.mSettingsHelper = new SettingsViewHelper(getActivity());
        SeparatedListAdapter adapter = new SeparatedListAdapter(getActivity());
        int featureSet = SettingsValues.getInstance(getActivity()).loadTouchServiceMode();
        List<Map<String, ?>> touchServiceSettings = new LinkedList<>();
        touchServiceSettings.add(SeparatedListAdapter.createItem("Activate LMT", "Activate or deactivate LMT"));
        touchServiceSettings.add(SeparatedListAdapter.createItem("Autostart LMT", "Configure if LMT should run at startup"));
        touchServiceSettings.add(SeparatedListAdapter.createItem("Set active features", "Configure LMT's feature set"));
        SettingsViewHelper settingsViewHelper = this.mSettingsHelper;
        int pos = 0 + 1;
        settingsViewHelper.posOffsetTouchservice = 0;
        int pos2 = pos + 1;
        settingsViewHelper.posActivateTouchService = pos;
        int pos3 = pos2 + 1;
        settingsViewHelper.posAutostartTouchService = pos2;
        int pos4 = pos3 + 1;
        settingsViewHelper.posSetMode = pos3;
        settingsViewHelper.getClass();
        adapter.addSection("General",
                new SettingsViewHelper.SettingsSimpleAdapter(getActivity(), touchServiceSettings, this.mSettingsHelper.posOffsetTouchservice, false));
        if (featureSet < 2) {
            List<Map<String, ?>> gestureRecognition = new LinkedList<>();
            gestureRecognition.add(SeparatedListAdapter.createItem("Auto configuration", "If auto configuration fails, set the input device and touchscreen to screen factors below manually"));
            gestureRecognition.add(SeparatedListAdapter.createItem("Set gesture input", "Set the input device for gesture recognition"));
            gestureRecognition.add(SeparatedListAdapter.createItem("Touchscreen to screen factor X", "Resolution factor in %, default = 100%"));
            gestureRecognition.add(SeparatedListAdapter.createItem("Touchscreen to screen factor Y", "Resolution factor in %, default = 100%"));
            SettingsViewHelper settingsViewHelper2 = this.mSettingsHelper;
            int pos5 = pos4 + 1;
            settingsViewHelper2.posOffsetGestureRecognition = pos4;
            int pos6 = pos5 + 1;
            settingsViewHelper2.posAutoConfiguration = pos5;
            int pos7 = pos6 + 1;
            settingsViewHelper2.posSetInput = pos6;
            int pos8 = pos7 + 1;
            settingsViewHelper2.posTouchscreenScreenFactorX = pos7;
            int pos9 = pos8 + 1;
            settingsViewHelper2.posTouchscreenScreenFactorY = pos8;
            settingsViewHelper2.getClass();
            adapter.addSection("Gesture recognition", new SettingsViewHelper.SettingsSimpleAdapter(getActivity(), gestureRecognition, this.mSettingsHelper.posOffsetIsas, false));
            List<Map<String, ?>> gestureSettings = new LinkedList<>();
            gestureSettings.add(SeparatedListAdapter.createItem("Feedback style", "Define the gesture feedback style"));
            gestureSettings.add(SeparatedListAdapter.createItem("Vibration Time", "Define the vibration time in ms, default = 30"));
            gestureSettings.add(SeparatedListAdapter.createItem("Single touch gestures", "Configure if single touch gestures should be recognized, default = enabled"));
            gestureSettings.add(SeparatedListAdapter.createItem("Min gesture score", "Min score in %, default = 70%"));
            gestureSettings.add(SeparatedListAdapter.createItem("Min gesture path length", "Min number of touch points, default = 7"));
            gestureSettings.add(SeparatedListAdapter.createItem("Add to gesture blacklist", "Exclude an app from gesture recognition"));
            gestureSettings.add(SeparatedListAdapter.createItem("Clear gesture blacklist", "Clear all excluded apps"));
            SettingsViewHelper settingsViewHelper3 = this.mSettingsHelper;
            int pos10 = pos9 + 1;
            settingsViewHelper3.posOffsetGestures = pos9;
            int pos11 = pos10 + 1;
            settingsViewHelper3.posFeedbackStyle = pos10;
            int pos12 = pos11 + 1;
            settingsViewHelper3.posVibrationTime = pos11;
            int pos13 = pos12 + 1;
            settingsViewHelper3.posSingleTouchGestures = pos12;
            int pos14 = pos13 + 1;
            settingsViewHelper3.posMinScore = pos13;
            int pos15 = pos14 + 1;
            settingsViewHelper3.posMinPathLength = pos14;
            int pos16 = pos15 + 1;
            settingsViewHelper3.posAddBlacklist = pos15;
            int pos17 = pos16 + 1;
            settingsViewHelper3.posClearBlacklist = pos16;
            settingsViewHelper3.getClass();
            adapter.addSection("Gestures", new SettingsViewHelper.SettingsSimpleAdapter(getActivity(), gestureSettings, this.mSettingsHelper.posOffsetGestures, false));
            List<Map<String, ?>> isasSettings = new LinkedList<>();
            isasSettings.add(SeparatedListAdapter.createItem("Min bounding box size", "Min bounding box size in pixel, 0 = disabled, 1 = enabled, >1 = enabled and size in pixel, default = 1"));
            isasSettings.add(SeparatedListAdapter.createItem("Activation area thickness", "Activation area width in pixel, default = 60"));
            SettingsViewHelper settingsViewHelper4 = this.mSettingsHelper;
            int pos18 = pos17 + 1;
            settingsViewHelper4.posOffsetIsas = pos17;
            int pos19 = pos18 + 1;
            settingsViewHelper4.posSingleSwipesBBox = pos18;
            settingsViewHelper4.posSingleSwipesAArea = pos19;
            settingsViewHelper4.getClass();
            adapter.addSection("ISAS", new SettingsViewHelper.SettingsSimpleAdapter(getActivity(), isasSettings, this.mSettingsHelper.posOffsetIsas, false));
            pos4 = pos19 + 1;
        }
        if (featureSet > 0) {
            List<Map<String, ?>> pieActivation = new LinkedList<>();
            pieActivation.add(SeparatedListAdapter.createItem("Activation area position", "Activation area position, default = all"));
            pieActivation.add(SeparatedListAdapter.createItem("Activation area thickness", "Activation area thickness in pixel, default = 50"));
            pieActivation.add(SeparatedListAdapter.createItem("Activation area length", "Activation area length in pixel, default = 600"));
            pieActivation.add(SeparatedListAdapter.createItem("Activation area gravity", "Configure the gravity, default = center"));
            pieActivation.add(SeparatedListAdapter.createItem("Activation area behind keyboard", "Configure if the activation area should be placed behind the keyboard, default = deactivated"));
            if (Build.VERSION.SDK_INT < 26) {
                pieActivation.add(SeparatedListAdapter.createItem("Activation area on lockscreen", "Configure if pie should be active on lockscreen, default = deactivated"));
            }
            pieActivation.add(SeparatedListAdapter.createItem("Add to pie blacklist", "Exclude an app from pie"));
            pieActivation.add(SeparatedListAdapter.createItem("Clear pie blacklist", "Clear all excluded apps"));
            SettingsViewHelper settingsViewHelper5 = this.mSettingsHelper;
            int pos20 = pos4 + 1;
            settingsViewHelper5.posOffsetPieActivation = pos4;
            int pos21 = pos20 + 1;
            settingsViewHelper5.posPiePos = pos20;
            int pos22 = pos21 + 1;
            settingsViewHelper5.posPieAreaX = pos21;
            int pos23 = pos22 + 1;
            settingsViewHelper5.posPieAreaY = pos22;
            int pos24 = pos23 + 1;
            settingsViewHelper5.posPieAreaGravity = pos23;
            int pos25 = pos24 + 1;
            settingsViewHelper5.posPieAreaBehindKeyboard = pos24;
            if (Build.VERSION.SDK_INT < 26) {
                this.mSettingsHelper.posPieOnLockScreen = pos25;
                pos25++;
            }
            SettingsViewHelper settingsViewHelper6 = this.mSettingsHelper;
            int pos26 = pos25 + 1;
            settingsViewHelper6.posAddBlacklistPie = pos25;
            int pos27 = pos26 + 1;
            settingsViewHelper6.posClearBlacklistPie = pos26;
            settingsViewHelper6.getClass();
            adapter.addSection("Pie Activation", new SettingsViewHelper.SettingsSimpleAdapter(getActivity(), pieActivation, this.mSettingsHelper.posOffsetPieActivation, false));
            List<Map<String, ?>> pieStyle = new LinkedList<>();
            pieStyle.add(SeparatedListAdapter.createItem("Pie colors", "0 = blue, 1 = red, 2 = grey, 3 = none, 4 = white, 5 = magenta/yellow, 6 = green/outline, 7 = red/outline, default = 0"));
            pieStyle.add(SeparatedListAdapter.createItem("Pie inner radius", "Radius in dip, default = 60"));
            pieStyle.add(SeparatedListAdapter.createItem("Pie outer radius", "Radius in dip, default = 80"));
            pieStyle.add(SeparatedListAdapter.createItem("Pie shift size", "Size of the pie shift effect in pixel, default = 0"));
            pieStyle.add(SeparatedListAdapter.createItem("Pie outline size", "Size of the outline in pixel, default = 3"));
            pieStyle.add(SeparatedListAdapter.createItem("Pie slice gap", "Size of the gap between two pie slices, default = 0"));
            pieStyle.add(SeparatedListAdapter.createItem("Pie start gap", "Size of the gap between pie and border, default = 0"));
            SettingsViewHelper settingsViewHelper7 = this.mSettingsHelper;
            int pos28 = pos27 + 1;
            settingsViewHelper7.posOffsetPieStyle = pos27;
            int pos29 = pos28 + 1;
            settingsViewHelper7.posPieColor = pos28;
            int pos30 = pos29 + 1;
            settingsViewHelper7.posPieInnerRadius = pos29;
            int pos31 = pos30 + 1;
            settingsViewHelper7.posPieOuterRadius = pos30;
            int pos32 = pos31 + 1;
            settingsViewHelper7.posPieShiftSize = pos31;
            int pos33 = pos32 + 1;
            settingsViewHelper7.posPieOutlineSize = pos32;
            int pos34 = pos33 + 1;
            settingsViewHelper7.posPieSliceGap = pos33;
            int pos35 = pos34 + 1;
            settingsViewHelper7.posPieStartGap = pos34;
            settingsViewHelper7.getClass();
            adapter.addSection("Pie Style", new SettingsViewHelper.SettingsSimpleAdapter(getActivity(), pieStyle, this.mSettingsHelper.posOffsetPieStyle, false));
            List<Map<String, ?>> pieBehavior = new LinkedList<>();
            pieBehavior.add(SeparatedListAdapter.createItem("Longpress time", "Min time for longpress in ms, default = 500"));
            pieBehavior.add(SeparatedListAdapter.createItem("Animation time", "Time for the pie animation in ms, default = 80"));
            pieBehavior.add(SeparatedListAdapter.createItem("Feedback type", "Configure the pie feedback for diffent actions, default = longpress"));
            pieBehavior.add(SeparatedListAdapter.createItem("Vibration Time", "Define the vibration time in ms, default = 30"));
            pieBehavior.add(SeparatedListAdapter.createItem("Multi command", "Configure if actions should be fired multiple times when swiping on item, default = disabled"));
            pieBehavior.add(SeparatedListAdapter.createItem("Expand trigger area", "Configure if the action trigger area should be expanded to the full screen for the outer pie ring, default = enabled"));
            SettingsViewHelper settingsViewHelper8 = this.mSettingsHelper;
            int pos36 = pos35 + 1;
            settingsViewHelper8.posOffsetPieBehavior = pos35;
            int pos37 = pos36 + 1;
            settingsViewHelper8.posPieLongpress = pos36;
            int pos38 = pos37 + 1;
            settingsViewHelper8.posPieAnimation = pos37;
            int pos39 = pos38 + 1;
            settingsViewHelper8.posPieVibrate = pos38;
            int pos40 = pos39 + 1;
            settingsViewHelper8.posPieVibrationTime = pos39;
            int pos41 = pos40 + 1;
            settingsViewHelper8.posPieMultiCommand = pos40;
            int pos42 = pos41 + 1;
            settingsViewHelper8.posPieExpandTriggerArea = pos41;
            settingsViewHelper8.getClass();
            adapter.addSection("Pie Behavior", new SettingsViewHelper.SettingsSimpleAdapter(getActivity(), pieBehavior, this.mSettingsHelper.posOffsetPieBehavior, false));
            List<Map<String, ?>> pieIcons = new LinkedList<>();
            pieIcons.add(SeparatedListAdapter.createItem("Rotate images", "Rotate icons based on pie angle"));
            pieIcons.add(SeparatedListAdapter.createItem("Set nav button style", "Switch between different icon sets for the nav buttons"));
            pieIcons.add(SeparatedListAdapter.createItem("Show and scale app images", "0 = disabled, 1 = enabled (no filter), 2 = enabled, >2 = image size in pixel, default = enabled"));
            pieIcons.add(SeparatedListAdapter.createItem("Show and scale user images", "0 = disabled, 1 = enabled (no filter), 2 = enabled, >2 = image size in pixel, default = disabled"));
            pieIcons.add(SeparatedListAdapter.createItem("Set user image search path", "default = /storage/emulated/0/Android/data/com.noname81.lmt/files/ (Leave blank to set default)"));
            SettingsViewHelper settingsViewHelper9 = this.mSettingsHelper;
            int pos43 = pos42 + 1;
            settingsViewHelper9.posOffsetPieIcons = pos42;
            int pos44 = pos43 + 1;
            settingsViewHelper9.posPieRotateImages = pos43;
            int pos45 = pos44 + 1;
            settingsViewHelper9.posPieNavButtonStyle = pos44;
            int pos46 = pos45 + 1;
            settingsViewHelper9.posPieShowScaleAppImages = pos45;
            int pos47 = pos46 + 1;
            settingsViewHelper9.posPieShowScaleUserImages = pos46;
            int pos48 = pos47 + 1;
            settingsViewHelper9.posPieUserImageSearchPath = pos47;
            settingsViewHelper9.getClass();
            adapter.addSection("Pie Icons", new SettingsViewHelper.SettingsSimpleAdapter(getActivity(), pieIcons, this.mSettingsHelper.posOffsetPieIcons, false));
            List<Map<String, ?>> pieExtensions = new LinkedList<>();
            pieExtensions.add(SeparatedListAdapter.createItem("Pie pointer edge activation", "Configure if the pie pointer feature can be activated from the edges (Also consider the pie pointer action to activate the feature!), default = disabled"));
            pieExtensions.add(SeparatedListAdapter.createItem("Pie pointer warp factor", "Configure the warp factor for the pie pointer feature,\ndefault = 300%, min = 200%, max = 1000%"));
            pieExtensions.add(SeparatedListAdapter.createItem("Pie pointer color", "0 = blue, default = 0"));
            pieExtensions.add(SeparatedListAdapter.createItem("Show status infos", "Configure if status info feature should be shown, default = enabled"));
            pieExtensions.add(SeparatedListAdapter.createItem("Pie status info colors", "0 = white, default = 0"));
            pieExtensions.add(SeparatedListAdapter.createItem("Pie status info font", "Configure the pie font, default = Roboto Light"));
            SettingsViewHelper settingsViewHelper10 = this.mSettingsHelper;
            int pos49 = pos48 + 1;
            settingsViewHelper10.posOffsetPieExtensions = pos48;
            int pos50 = pos49 + 1;
            settingsViewHelper10.posPiePointerFromEdges = pos49;
            int pos51 = pos50 + 1;
            settingsViewHelper10.posPiePointerWarpFactor = pos50;
            int pos52 = pos51 + 1;
            settingsViewHelper10.posPiePointerColor = pos51;
            int pos53 = pos52 + 1;
            settingsViewHelper10.posPieShowStatusInfos = pos52;
            int pos54 = pos53 + 1;
            settingsViewHelper10.posPieStatusInfoColor = pos53;
            int i = pos54 + 1;
            settingsViewHelper10.posPieStatusInfoFont = pos54;
            settingsViewHelper10.getClass();
            adapter.addSection("Pie Extensions", new SettingsViewHelper.SettingsSimpleAdapter(getActivity(), pieExtensions, this.mSettingsHelper.posOffsetPieExtensions, false));
        }
        ListView list = new ListView(getActivity());
        list.setAdapter((ListAdapter) adapter);
        list.setOnItemClickListener(this.mSettingsHelper);
        list.setDividerHeight(0);
        return list;
    }
}